name: Clone repo & build & start app with Docker and Notary

on:
  workflow_call:
    secrets:
      SSH_PRIVATE_KEY:
        required: true
      REMOTE_HOST:
        required: true
      REMOTE_USER:
        required: true
      TARGET:
        required: true
  workflow_dispatch:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io/pascalnehlsen
  IMAGE_NAME: conduit
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  DOCKER_CONTENT_TRUST: 1

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.8.0

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.6.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image for frontend
        id: frontend-build-and-push
        uses: docker/build-push-action@v6.12.0
        with:
          context: ./conduit-frontend
          file: ./conduit-frontend/frontend.Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/conduit-frontend:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=common
          cache-to: type=gha,mode=max,scope=common

      - name: Build and push Docker image for backend
        id: backend-build-and-push
        uses: docker/build-push-action@v6.12.0
        with:
          context: ./conduit-backend
          file: ./conduit-backend/backend.Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/conduit-backend:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=common
          cache-to: type=gha,mode=max,scope=common

      # - name: Push images (with Docker Content Trust)
      #   run: |
      #     echo "Pushing frontend and backend images with Docker Content Trust enabled."
      #     docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/conduit-frontend:${{ github.sha }}
      #     docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/conduit-backend:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      - name: List repository files
        run: |
          ls -alh

      - name: SSH into the server and deploy with Docker Compose
        run: |
          # Ensure the target directory exists on the remote server with correct permissions
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << 'EOF'
            sudo mkdir -p ${{ secrets.TARGET }}
            sudo chown -R ${{ secrets.REMOTE_USER }}:$${{ secrets.REMOTE_USER }} ${{ secrets.TARGET }}  # Ensure user has write permission
          EOF

          # Use rsync to transfer docker-compose.yml with sudo permissions
          rsync -avz --rsync-path="sudo rsync" ./docker-compose.yaml ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:${{ secrets.TARGET }}/

          # Deploy the app with Docker Compose
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << 'EOF'
            cd ${{ secrets.TARGET }}
            echo "Starting the deployment..."
            docker-compose down --remove-orphans || { echo "Failed to stop containers"; exit 1; }
            docker system prune -af || { echo "Failed to prune system"; exit 1; }
            docker-compose pull || { echo "Failed to pull images"; exit 1; }
            docker-compose up -d || { echo "Failed to start containers"; exit 1; }
          EOF
